Basics:
1. Create a basic project with no source
2. Run SBT (in a console in console mode) and then run:
    - tasks to see the available tasks
    - compile and show that the classes are compiled into target
    - note that they are all in a scala 2.9.2 directory
    - run package and note the name of the jar file
    - run clean to start again
3. Talk through the fact that SBT is a simple bootstrap and then show the executable.  Look up the fact that the sbt jar is downloaded.  Create a dir called project and in there pop a build.properties: [sbt.version=0.12.2]
    - restart sbt and see the download
    - then increament to a version that does not exist and restart .. note the failures
    - put it back to 0.12.2
4. Now go into the .sbt files in the root of the project:
    - create a file called build.sbt
    - add some attributes [name, version, scalaVersion] using :=
    - note the line separators
    - restart the console
    - now do a full packge and go through the jar and its contents
5. Now lets create a test:
    - create a directory src/test/java
    - in there pop a test class Footest.java
    - see it fail due to lack of dependencies
    - now open up the build.sbt and add in a dependencu with
        [libraryDependencies += "org.scalatest" %% "scalatest" % "1.9.1"]
    - explain the syntax
Now we have a running test.
=================================

Now lets play about a little bit.
1. Change the console prompt [shellPrompt := {state => System.getProperty("user.name") +  "> " }]
2. Change the pol interval [pollInterval := 1000]
3. Now lets create a simple hello world task [TaskKey[Unit]("hello") := { println("Hello World!") }]
4. Now lets add a plugin.  Here we need to add the sbt idea plugin.  Create project/plugins.sbt and add:
    resolvers += "Sonatype snapshots" at "http://oss.sonatype.org/content/repositories/snapshots/"
    addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.3.0-SNAPSHOT")
=================================

=================================

Now lets have a look at the multi module build
1. Recap what we did for the single module build
2. For sake of brevity, copy the plugins.sbt and build.properties over
3. Now explain the dir structure: rds-api and rds-impl
4. Create the empty projects first
5. Now create the basic Build.scala class that we will work from
 - start with a base project and then build them out steadily
 - work from the base project out



